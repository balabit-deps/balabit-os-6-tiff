Backport of:

From 1044b43637fa7f70fb19b93593777b78bd20da86 Mon Sep 17 00:00:00 2001
From: erouault <erouault>
Date: Fri, 2 Dec 2016 23:05:51 +0000
Subject: [PATCH] * libtiff/tif_pixarlog.c, libtiff/tif_luv.c: fix heap-based
 buffer overflow on generation of PixarLog / LUV compressed files, with
 ColorMap, TransferFunction attached and nasty plays with bitspersample. The
 fix for LUV has not been tested, but suffers from the same kind of issue of
 PixarLog. Reported by Agostino Sarubbo. Fixes
 http://bugzilla.maptools.org/show_bug.cgi?id=2604

---
 ChangeLog              | 10 ++++++++++
 libtiff/tif_luv.c      | 18 ++++++++++++++----
 libtiff/tif_pixarlog.c | 17 +++++++++++++++--
 3 files changed, 39 insertions(+), 6 deletions(-)

#diff --git a/ChangeLog b/ChangeLog
#index 0f154d66..93c01f80 100644
#--- a/ChangeLog
#+++ b/ChangeLog
#@@ -1,3 +1,13 @@
#+2016-12-03 Even Rouault <even.rouault at spatialys.com>
#+
#+	* libtiff/tif_pixarlog.c, libtiff/tif_luv.c: fix heap-based buffer
#+	overflow on generation of PixarLog / LUV compressed files, with
#+	ColorMap, TransferFunction attached and nasty plays with bitspersample.
#+	The fix for LUV has not been tested, but suffers from the same kind
#+	of issue of PixarLog.
#+	Reported by Agostino Sarubbo.
#+	Fixes http://bugzilla.maptools.org/show_bug.cgi?id=2604
#+
# 2016-12-02 Even Rouault <even.rouault at spatialys.com>
# 
# 	* tools/tiffcp.c: avoid uint32 underflow in cpDecodedStrips that 
Index: tiff-4.0.6/libtiff/tif_luv.c
===================================================================
--- tiff-4.0.6.orig/libtiff/tif_luv.c	2018-03-20 07:35:30.215472008 -0400
+++ tiff-4.0.6/libtiff/tif_luv.c	2018-03-20 07:35:30.215472008 -0400
@@ -158,6 +158,7 @@
 typedef struct logLuvState LogLuvState;
 
 struct logLuvState {
+        int                     encoder_state;  /* 1 if encoder correctly initialized */
 	int                     user_datafmt;   /* user data format */
 	int                     encode_meth;    /* encoding method */
 	int                     pixel_size;     /* bytes per pixel */
@@ -1536,6 +1537,7 @@ LogLuvSetupEncode(TIFF* tif)
 		    td->td_photometric, "must be either LogLUV or LogL");
 		break;
 	}
+	sp->encoder_state = 1;
 	return (1);
 notsupported:
 	TIFFErrorExt(tif->tif_clientdata, module,
@@ -1547,19 +1549,27 @@ notsupported:
 static void
 LogLuvClose(TIFF* tif)
 {
+        LogLuvState* sp = (LogLuvState*) tif->tif_data;
 	TIFFDirectory *td = &tif->tif_dir;
 
+	assert(sp != 0);
 	/*
 	 * For consistency, we always want to write out the same
 	 * bitspersample and sampleformat for our TIFF file,
 	 * regardless of the data format being used by the application.
 	 * Since this routine is called after tags have been set but
 	 * before they have been recorded in the file, we reset them here.
+         * Note: this is really a nasty approach. See PixarLogClose
 	 */
-	td->td_samplesperpixel =
-	    (td->td_photometric == PHOTOMETRIC_LOGL) ? 1 : 3;
-	td->td_bitspersample = 16;
-	td->td_sampleformat = SAMPLEFORMAT_INT;
+        if( sp->encoder_state )
+        {
+            /* See PixarLogClose. Might avoid issues with tags whose size depends
+             * on those below, but not completely sure this is enough. */
+            td->td_samplesperpixel =
+                (td->td_photometric == PHOTOMETRIC_LOGL) ? 1 : 3;
+            td->td_bitspersample = 16;
+            td->td_sampleformat = SAMPLEFORMAT_INT;
+        }
 }
 
 static void
Index: tiff-4.0.6/libtiff/tif_pixarlog.c
===================================================================
--- tiff-4.0.6.orig/libtiff/tif_pixarlog.c	2018-03-20 07:35:30.215472008 -0400
+++ tiff-4.0.6/libtiff/tif_pixarlog.c	2018-03-20 07:36:00.311460169 -0400
@@ -1231,8 +1231,10 @@ PixarLogPostEncode(TIFF* tif)
 static void
 PixarLogClose(TIFF* tif)
 {
+        PixarLogState* sp = (PixarLogState*) tif->tif_data;
 	TIFFDirectory *td = &tif->tif_dir;
 
+	assert(sp != 0);
 	/* In a really sneaky (and really incorrect, and untruthfull, and
 	 * troublesome, and error-prone) maneuver that completely goes against
 	 * the spirit of TIFF, and breaks TIFF, on close, we covertly
@@ -1241,8 +1243,19 @@ PixarLogClose(TIFF* tif)
 	 * readers that don't know about PixarLog, or how to set
 	 * the PIXARLOGDATFMT pseudo-tag.
 	 */
-	td->td_bitspersample = 8;
-	td->td_sampleformat = SAMPLEFORMAT_UINT;
+
+        if (sp->state&PLSTATE_INIT) {
+            /* We test the state to avoid an issue such as in
+             * http://bugzilla.maptools.org/show_bug.cgi?id=2604
+             * What appends in that case is that the bitspersample is 1 and
+             * a TransferFunction is set. The size of the TransferFunction
+             * depends on 1<<bitspersample. So if we increase it, an access
+             * out of the buffer will happen at directory flushing.
+             * Another option would be to clear those targs. 
+             */
+            td->td_bitspersample = 8;
+            td->td_sampleformat = SAMPLEFORMAT_UINT;
+        }
 }
 
 static void
